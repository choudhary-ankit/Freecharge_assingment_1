{"version":3,"sources":["Component/Section/Section.module.css","Component/Section/Section.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Section","props","componentDidMount","axios","get","then","responce","setState","ApiData","data","catch","err","alert","handleChange","e","target","name","value","state","search","className","Style","partisiton","section_two","section_two_body","AppBar","position","Toolbar","variant","nav_icon_home","src","logo","arrng","placeholder","type","search_input","onChange","this","card_div","slice","map","s","split","Card","card_size","CardActionArea","CardMedia","img_media","image","title","CardContent","Typography","gutterBottom","component","Brand","color","Variety","CardActions","Country","Stars","select_resturent","console","log","above_star","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2285175c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"body_div\":\"Section_body_div__Zz2Ye\",\"partisiton\":\"Section_partisiton__2kuuA\",\"section_one\":\"Section_section_one__3wvqO\",\"section_two\":\"Section_section_two__1eIvA\",\"section_two_body\":\"Section_section_two_body__RKDwA\",\"nav_icon_home\":\"Section_nav_icon_home__LbVBy\",\"logo\":\"Section_logo__3KOph\",\"home\":\"Section_home__1nsdX\",\"arrng\":\"Section_arrng__jxDfM\",\"search_input\":\"Section_search_input__2GPtk\",\"card_div\":\"Section_card_div__FuVHc\",\"card_size\":\"Section_card_size__osQSX\",\"img_media\":\"Section_img_media__157q1\",\"select_resturent\":\"Section_select_resturent__eZOBS\"};","import React, { Component } from 'react';\nimport Style from './Section.module.css';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport axios from 'axios'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nexport default class Section extends Component {\n    constructor(props){\n        super(props)\n            this.state={\n                ApiData:[],\n                search:'',\n            }\n        \n    }\n    componentDidMount=()=>{\n        axios.get(\"http://starlord.hackerearth.com/TopRamen\")\n            .then(responce =>\n                this.setState({ApiData:responce.data}))\n            .catch(err =>\n                alert(\"Error\"))\n    }\n    handleChange=(e)=>{\n        this.setState({\n            [e.target.name]:e.target.value\n        })\n        \n    }\n    render() {\n        \n        return (\n            <div>\n                <div className={Style.partisiton}>\n                    <div className={Style.section_two}>\n                        <div className={Style.section_two_body}>\n                            <AppBar position=\"static\">\n                                <Toolbar variant=\"dense\" className={Style.nav_icon_home}>\n                                    <img src=\"don-ramon-restaurant-logo.png\" className={Style.logo}></img>\n                                    <div className={Style.arrng}>\n                                        <input placeholder=\"Search Resturent\" type=\"text\" name=\"search\" className={Style.search_input} onChange={this.handleChange}></input>\n                                    </div>\n                                    \n                                </Toolbar>\n                            </AppBar>\n                            <div>\n                                <div>\n                                    <h2>Top Hotel</h2>\n                                    <div className={Style.card_div}>\n                                        {\n                                            this.state.ApiData.slice(0,30).map((e)=>{\n                                                var rank= e[\"Top Ten\"]\n                                                var s=rank.split(\" \");\n                                                if(s[1]==\"#1\")\n                                                return(\n                                                    <Card className={Style.card_size}>\n                                                        <CardActionArea>\n                                                            <CardMedia\n                                                                className={Style.img_media}\n                                                                image=\"don-ramon-restaurant-logo.png\"\n                                                                title=\"Contemplative Reptile\"\n                                                                />\n                                                            <CardContent>\n                                                                <Typography gutterBottom variant=\"h5\" component=\"h2\">{`${e.Brand}`}</Typography>\n                                                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{e.Variety}</Typography>\n                                                                <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">{`Style: ${e.Style}`}</Typography>\n                                                                <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">{`Rank: ${s[1]}`}</Typography>\n                                                            </CardContent>\n                                                        </CardActionArea>\n                                                        <CardActions>\n                                                            <Typography variant=\"body2\" color=\"primary\">{`Country: ${e.Country} ;`}</Typography>\n                                                            <Typography variant=\"body2\" color=\"primary\">{`Star: ${e.Stars}`}</Typography>\n                                                        </CardActions>\n                                                    </Card>\n                                                )\n                                            })\n                                        }\n                                    </div>\n                                </div>\n                                <div>\n                                    <h2>Select your Resturent</h2>\n                                    <div className={Style.select_resturent}>\n                                        {\n                                            this.state.ApiData.map((e)=>{\n                                                var rank= e[\"Top Ten\"]\n                                                var s=rank.split(\" \");\n                                                if(this.state.search==''){\n                                                return(\n                                                    <Card className={Style.card_size}>\n                                                        <CardActionArea>\n                                                            <CardMedia\n                                                                className={Style.img_media}\n                                                                image=\"don-ramon-restaurant-logo.png\"\n                                                                title=\"Contemplative Reptile\"\n                                                                />\n                                                            <CardContent>\n                                                                <Typography gutterBottom variant=\"h5\" component=\"h2\">{`${e.Brand}`}</Typography>\n                                                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{e.Variety}</Typography>\n                                                                <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">{`Style: ${e.Style}`}</Typography>\n                                                                <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">{`Rank: ${s[1]}`}</Typography>\n                                                            </CardContent>\n                                                        </CardActionArea>\n                                                        <CardActions>\n                                                            <Typography variant=\"body2\" color=\"primary\">{`Country: ${e.Country} ;`}</Typography>\n                                                            <Typography variant=\"body2\" color=\"primary\">{`Star: ${e.Stars}`}</Typography>\n                                                        </CardActions>\n                                                    </Card>\n                                                )\n                                                }\n                                                else{\n                                                    console.log(this.state.above_star)\n                                                    if(e.Brand==this.state.search){\n                                                        \n                                                        return(\n                                                            <Card className={Style.card_size}>\n                                                                <CardActionArea>\n                                                                    <CardMedia\n                                                                        className={Style.img_media}\n                                                                        image=\"don-ramon-restaurant-logo.png\"\n                                                                        title=\"Contemplative Reptile\"\n                                                                        />\n                                                                    <CardContent>\n                                                                        <Typography gutterBottom variant=\"h5\" component=\"h2\">{`${e.Brand}`}</Typography>\n                                                                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{e.Variety}</Typography>\n                                                                        <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">{`Style: ${e.Style}`}</Typography>\n                                                                        \n                                                                        <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">{`Rank: ${s[1]}`}</Typography>\n                                                                        \n                                                                    \n                                                                    </CardContent>\n                                                                </CardActionArea>\n                                                                <CardActions>\n                                                                    <Typography variant=\"body2\" color=\"primary\">{`Country: ${e.Country} ;`}</Typography>\n                                                                    <Typography variant=\"body2\" color=\"primary\">{`Star: ${e.Stars}`}</Typography>\n                                                                </CardActions>\n                                                            </Card>\n                                                        )\n                                                    }\n                                                }\n                                            })\n                                        }\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Section from './Component/Section/Section'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Section/>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}